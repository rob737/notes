Java has simple concept.
Map every problem in terms of object, 
an object has state(some intrinsic values that can be used to represent building block of problem),
behaviour(state is of no use if we can't access it for some utility which is driven by behaviour), 
identity(We need a mechanism to identify objects uniquely such that we can combine and communicate between objects to solve problem)

------

Class is basically an abstract data type and object is (run-time) instance of that type.

------

UML diagram (format - 3 boxes stack one over another) :

type/class Name -> Data Members -> Methods

------ 

access modifiers :

public : any instance can access these states or methods.

private : local to instance and cannot be accessed by any other instance.

protected : other instance can access protected members (state or methods) if they are related via inheritance. 

default : usually we group types(class) in a package to ship it as library, default members are accessible within a package.


-------

Composition : using functionality of a class/object to create another class/object. (e.g. Medicine has an ingredients or medicine is composed of ingredients ).
If by default we get composition then it's called aggregration (e.g. String Object has Object's functionality).


Inheritance :

Derived class is (derived) from base class (using extends keyword) and is exactly of the same type.
To differentiate a bit we can add more methods in derived class or override methods from base class and change it's implementation.


--------

early binding  & late binding : 

In case of inheritance, compiler doesn't know which subclass to be called at compile.
So it binds to base class at compile time and at runtime based on certain parameters exact subclass 
is determined which is called late binding. 	

This concept is also called polymorphism.

------
Object is base type for all objects.


------

Heap : Object is created in heap memory and compiler has no idea about it's lifetime.

part of RAM is dedicated for heap memory.