------------------------------------------- Doubts -----------------------------------------
1. What exactly is a secondary index?
I think it is the index that we manually create on some column while primary index is basically the ordering around primary key.




------------------------------------------- XXXX --------------------------------------------


Atomic commit :

In a database that supports transactions spanning several nodes or partitions, we
have the problem that a transaction may fail on some nodes but succeed on others.
If we want to maintain transaction atomicity (in the sense of ACID; see
“Atomicity” on page 223), we have to get all nodes to agree on the outcome of the
transaction: either they all abort/roll back (if anything goes wrong) or they all
commit (if nothing goes wrong). This instance of consensus is known as the
atomic commit problem.

Two-phase commit (2PC) is the most common way of solving Atomic commit problem.
It turns out that 2PC is a kind of consensus algorithm—but not a very good one.
By learning from 2PC we will then work our way toward better consensus algorithms,
such as those used in ZooKeeper (Zab) and etcd (Raft).

Each secondary index is a separate data structure
from the primary data—thus, if you modify some data, the corresponding change
needs to also be made in the secondary index.

Atomicity ensures that the secondary index stays consistent with the primary data.

-- From single-node to distributed atomic commit

A transaction is deemed to be sucessfully committed if the operation steps that needs to be performed as part of tranasaction is
successfully written in WAL (Write Ahead Logging).


what if multiple nodes are involved in a transaction? For example, perhaps
you have a multi-object transaction in a partitioned database, or a term-partitioned
secondary index (in which the index entry may be on a different node from the primary
data; see “Partitioning and Secondary Indexes” on page 206). Most “NoSQL”
distributed datastores do not support such distributed transactions, but various clustered
relational systems do (see “Distributed Transactions in Practice” on page 360). ?


It is possible for the effects of a committed transaction to later be undone by
another, compensating transaction. However, from the database’s point of
view this is a separate transaction, and thus any cross-transaction correctness
requirements are the application’s problem.

-- Introduction to two-phase commit :

Two-phase commit is an algorithm for achieving atomic transaction commit across
multiple nodes—i.e., to ensure that either all nodes commit or all nodes abort.

To facilitate 2 PC, a separate component called coordinator or transaction manager is leveraged to manage status across all applicable nodes.

A 2PC transaction begins with the application reading and writing data on multiple
database nodes, as normal. We call these database nodes participants in the transaction.
When the application is ready to commit, the coordinator begins phase 1: it
sends a prepare request to each of the nodes, asking them whether they are able to
commit. The coordinator then tracks the responses from the participants:
• If all participants reply “yes,” indicating they are ready to commit, then the coordinator
sends out a commit request in phase 2, and the commit actually takes
place.
• If any of the participants replies “no,” the coordinator sends an abort request to
all nodes in phase 2.


To understand why it works, we have to break down the process in a bit more detail:
1. When the application wants to begin a distributed transaction, it requests a
transaction ID from the coordinator. This transaction ID is globally unique.

2. The application begins a single-node transaction on each of the participants, and
attaches the globally unique transaction ID to the single-node transaction. All
reads and writes are done in one of these single-node transactions. If anything
goes wrong at this stage (for example, a node crashes or a request times out), the
coordinator or any of the participants can abort.

3. When the application is ready to commit, the coordinator sends a prepare
request to all participants, tagged with the global transaction ID. If any of these
requests fails or times out, the coordinator sends an abort request for that transaction
ID to all participants.

4. When a participant receives the prepare request, it makes sure that it can definitely
commit the transaction under all circumstances. This includes writing all
transaction data to disk (a crash, a power failure, or running out of disk space is
not an acceptable excuse for refusing to commit later), and checking for any conflicts
or constraint violations. By replying “yes” to the coordinator, the node
promises to commit the transaction without error if requested. In other words,
the participant surrenders the right to abort the transaction, but without actually
committing it.

5. When the coordinator has received responses to all prepare requests, it makes a
definitive decision on whether to commit or abort the transaction (committing
only if all participants voted “yes”). The coordinator must write that decision to
its transaction log on disk so that it knows which way it decided in case it subsequently
crashes. This is called the commit point.

6. Once the coordinator’s decision has been written to disk, the commit or abort
request is sent to all participants. If this request fails or times out, the coordinator
must retry forever until it succeeds. There is no more going back: if the decision
was to commit, that decision must be enforced, no matter how many retries it
takes. If a participant has crashed in the meantime, the transaction will be committed when it recovers—since the participant voted “yes,” it cannot refuse to
commit when it recovers.


-- Three-phase commit

