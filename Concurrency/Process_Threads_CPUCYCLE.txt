-------------------------------------------- This is dedicated doubt section -------------------------------------------------------------------------------------
1. How do we verify how much memory our application/process is taking to fulfill incoming requests?
2. What are the instruction sets that are not related to fetching something from memory/disk?
3. What is exactly meant by multi-core or multi-processor machines ? is it like we have registers for each core or registers like main memory is also shared?
4. When we say CPU, what exactly are we referring to ?
5. What is the difference between thread scheduling and process scheduling?
6. Let's say a process or thread gets kicked out of one core and gets re-scheduled on different core in sometime 
   then how core knows till which instruction process is already executed?








-------------------------------------------------------------------------------XXXXX-------------------------------------------------------------------------------


---- Process fundamentals :

1. Process is basically just a set of instructions that need CPU time to get executed.
   your application code is basically a process because it has a set of instructions that needs to be computed by CPU.
   
2. Each Process has a separate area in main memory, so no two processes can override each other memory locations.

3. Each process since everything is a file in linux is also a file which is idenitfied by process id which i assume would be file descriptor.

4. Process gets scheduled in the CPU.

Note : If there are any tasks that needs I/O or any other form of fetching from memory then it is kicked out of CPU and other process gets CPU execution slot.

---- Thread fundamentals :

1. It is basically a lightweight process (LWP) that is spawned from parent process and shares the memory locations.
2. It is also nothing but set of instructions.
3. Since, it is technically a lightweight process so it also has id.
4. Also, it gets scheduled in the CPU.


---- Ways of Designing backend Systems :

--- Single Threaded : Like node js etc.

--- Multiple processes :

Example : Nginx/Postgres uses this architecture.

1. App has multiple processes.

2. Each process has it's own dedicated memory space.

3. There is also one extra shared memory space shared among all the processes.

4. Take advantage of multiple cores as different process can execute on different core simultaneously.

5. Under the hood, it uses kernel's fork method to create different processes with a separate memory.

Note : Redis uses Copy On Write to maintain consitency while taking backup from in-memory to disk (Read about it).

--- Multithreaded :

1. One process but multiple threads (lighweight child process).
2. Since, memory of process is shared so there is a competition between threads.
3. There will be race conditions.

Example : Apache, Envoy, SQL server.