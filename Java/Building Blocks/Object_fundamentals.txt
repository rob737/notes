Java has simple concept.
Map every problem in terms of object, 
an object has state(some intrinsic values that can be used to represent building block of problem),
behaviour(state is of no use if we can't access it for some utility which is driven by behaviour), 
identity(We need a mechanism to identify objects uniquely such that we can combine and communicate between objects to solve problem)

------

Class is basically an abstract data type and object is (run-time) instance of that type.

------

UML diagram (format - 3 boxes stack one over another) :

type/class Name -> Data Members -> Methods

------ 

access modifiers :

public : any instance can access these states or methods.

private : local to instance and cannot be accessed by any other instance.

protected : other instance can access protected members (state or methods) if they are related via inheritance. 

default : usually we group types(class) in a package to ship it as library, default members are accessible within a package.