------------------------------------ Doubt -----------------------------------------------------



------------------------------------ XXXXXX ----------------------------------------------------

"Getting better at your craft is the reward".

"Aim is to focus mental resources totally on the moment and the task at hand".


---- TLS (Transport Layer Security) :

It is in a way layer 5 construct as it involves securing connections.

HTTPS is basically Http over TLS.

Note: TLS can be leveraged to encrypt any layer 7 protocol and not just Http.


Steps in TLS handshake or Https :

Note : It takes place after TCP handshake is done and connection must be open for this to take place.

Step 1 : Handshake is established basically to share symmetric key between client and server.
		 This key would be used by client to encrypt data and by the server to decrypt data.
		 

Step 2 : Client encrypts the request and then sends it to server over TCP.

Note: We are considering symmetric key algorithm instead of asymmetric key algorithm for discussion as symmetric key algorithm is pretty fast.
      Symmetric key algorithm uses xor to verify the contents.
	  Whereas asymmetry algorithm has separate keys to encrypt and decrypt but symmetric key algorithm has the same key.
	  
	  Certificate is basically encryption using public key and then if the receiver has the private key to decrypt the contents of the certificate
	  then we would say that receiver is authenticated.
	  

---- TLS 1.2 :

It is based on asymmetric encryption i.e. concept of public/private keys.

Public key can be shared while private key cannot be shared.

Certificate contains the public key.	  

Note: There are two algorithms leveraged : one to exchange the key and one to encrypt the data (usually symmetric).

Steps :

1. Client sends TLS hello to server and notifies to use RSA (most popular asymmetric key exchange algorithm) to initiate TLS between client & server.

2. Server sends back certificate and public key asking client for the private symmetric key that will be used to decrypt client data.

3. Client uses public key from server in step above to encrypt the "private" symmetric key, note here that client is encrypting the symmetric key 
   that needs to be shared with the server which will be used by server later on to decrypt the data.

 Note : If you go down the rabbit hole then you would understand that client doesn't send the private key itself but an input that can be used to
		generate symmetric private key.
		
4. Now, if someone gets the symmetric key then also they can't do any harm as only private key can be used which is present in server to decrypt the contents
   that is encrypted by it's public key.

So, to clear out the air. There are three keys : public, private and symmetric key.

Public / Private keys are used for exchanging symmetric key.

Public key is used to encrypt the symmetric key and send it back to server. (Step 2 & 3 above)

Let's say someone snoops at this stage while encrypted symmetric key is being shared over the wire then since private key 
is with server only, the attacker will not be able to make sense of encrypted symmetric key as private key is the only 
key that can decrypt the encrypted symmetric key.

5. Client sends Cipher Fin to denote that it has send the symmetric key.

6. Server sends back Cipher Fin to denote that it has received the key. It sends it after decrypting it with private key.

7. Now, client can encrypt the data and send it to the server.

So, techincally TLS is also a 4 way handshake but this trade off is necessary for security.

client -> server (TLS hello)

Server -> Client (Public key + certificate)

Client -> Server ( Change Cipher Fin (flag) + Encrypted Symmetric key)

Server -> Client (Change Cipher Fin (flag))


Note : SSH uses private/public key encryption.

Note: OpenSSL is the library that is used for TLS1.2 implementation.


---- Diffie Hellman :

Better key exchanger than RSA.

The problem with TLS1.2 was that because of a bug in OpenSSL, people were able to retrieve private key from the server.
Hence, entire communication was compromised.

A key is techincally a number (I think hexadecimal).
Even certificate is a number.

Concept is that there will be two private keys (one for client and one for server) and a public key.

Combination of public + either of private key is shared which is mumbo jumbo so no one could figure out what is it exactly.

Now, let's say public key is represented by g, private keys are x and y.

The combination that is sent over the network is basically this :

g^x % n where n is the prime number.

hence, the number(key) that is being sent over the wire is mumbo jumbo because of this operation.

Now, let's say we have to get the symmetric key that would be used to encrypt/decrypt data.

we can do (g^x % n)^y = g^xy % n which is the symmetric key.

Hence, Diffie Hellman solved the problem of leaked private key as it is sending mumbo jumbo number over the wire.

Obviously, if both private keys are leaked then there is no way to be secured.


---- TLS 1.3 :

It leverages Diffie hellman algorithm with 2 way handshake instead of 4 like we had in TLS1.2

Step 1 : Client sends public key + (public (g) + client private key (x)) to server with client hello / fin flag.

Processing step : Server uses it's private key (y) and computes the symmetric key using formaula (g^xy % n) which gives the symmetric key.

Step 2 : Server sends it's private key (y) + public key (g) combination to client with server hello / fin flag.

Processing step : Now, client would use the same formula (g ^ xy % n) which would result in the same symmetric key.

hence, two way handshake instead of four .

After this client can enrypt the data and server can decrypt the data as both of them has the keys.


