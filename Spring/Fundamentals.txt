---- Beans and Spring Application Context :

Any application or process is typically built on many components.

let's say you are creating one Todo APP.

There will be following components involved primarily :

1. component to perform DB related activities

2. component to cater to client activities

3. component working as an adapter between client and backend related activities.

4. component that performs backend specific logic before data is persisted into DB.

Each component in Spring's term is called as Bean.

so basically bean in java terms would be an object that has members and methods to perform an activity.

We would need some orchestrator to create these beans when and where it's needed.

Other primary role of orchestrator is dependency injection.

let's say there is a custom component that is created to that uses component 3 and component 4 described above.

there are two ways to do this job, first is to create each component individually in custom component and maintain it.

other way is to delegate this responsibilty to Spring Application Context (or Orchestrator) which injects components(beans) wherever necessary.

e.g. in above custom component, Spring Application Context will inject component 3 and 4 into custom component and this is known as 
dependency injection.

more formally, Spring Application Context (or container) creates and manages components (also called as Beans).


---- Two ways of defining beans :

1. xml based e.g. <bean id = "" .... />

2. java annotation based e.g.

   @Configuration
   public class ServiceConfiguration{
   
   @Bean
   public InventoryService inventoryService(){
    return new InventoryService();
   }
   
  }
  
Explanation : @Configuration annotation tells Spring Application context that is the class that would give you bean definitions.
              by default bean id is method's name.


--- Autowiring and Component Scanning :

Autowiring : Spring's mechanism for dependency injection.

Component Scanning : Spring (Doubt : what is actually the thing that is being referred as Spring?) scans the classpath(Doubt: By default, what is the classpath)
and creates them as beans in SpringApplicationContext.

--- Spring boot :

Spring boot provides a mechanism called autoconfiguration, where spring boot decides on autowiring and component scanning on the fly i.e. without us 
manually defining those.

--- Initializing Spring APP :

From the web application at http://start.spring.io


---- **** Important ****

@SpringBootApplication : This annotation signifies that it is a spring boot application.

Above annotation constitutes of below 3 annotations :

1. @SpringBootConfiguration :

Desingates corresponding class as a configuration class.
This is specialized form of @Configuration.

2. @EnableAutoConfiguration :
this tells spring to enable autoconfiguration(will be discussed later).

3. @ComponentScan :

enables component scanning, this basically enables us to define other annotations like 
@Configuration, @Service, @Controller, @Repository etc which in turn is identified by Spring and register 
them as components in spring application context.

we define a "main" method which serves as the entry point.


--- Testing Spring application :

Spring Initializer gives a test suite to get started.

It uses Junit4 library for test cases.

-- @RunWith(SpringRunner.class) and @SpringBootTest annotations are tasked to load the Spring Application context for the test.

-- @Controller :

On it's own @Controller annotation just signals @ComponentScan to create bean of the underlying class in Spring Application Context.

Similar is the role of other annotations like @Service, @Component, @Repository etc.
@Controller is defined because it gives a valid description of the utility of this class.

Note :

@WebMvcTest(<SomeClassName>.class) -- This annotation provides annotations for MVC.


So, what exactly is MVC (Model View Controller) :

Controller : It is basically the front line soldier who accepts client requests and route to specific methods based on request's path.

Model : It's used optionally to map response to POJO that can be converted into a view.

View : A html template that gets downloaded by browser and then rendered on it.

so basically, browser downloads fronend code and then renders it.
Alternative to that is that we can give one template instead of client side code which will be downloaded by browser and then rendered on screen.

--- Spring Boot Dev Tools :

It provides following features :

1. Automatic application restart when application code changes.
2. Automatic browser refresh when browser destined resources (e.g. templates, javacript etc changes).
3. Automatic disable of template caches.
4. Inbuilt in-memory H2 db.

-- Automatic Application restart using dev tool.

Devtool loads application into two separate class loaders, one loader is responsible for loading code present in /src/main/ 
and other is responsible for loading dependency.

-- When Spring boot application starts :
Spring boot's autoconfiguration comes into play and does the following things :

1. Configures and creates the beans in SpringApplicationContext
2. Configures an embedded Tomcat server in the Spring Application context
3. Configures thymeleaf view resolver for resolving views.

Spring vs Spring boot :

Actuator is present in Spring boot but not in Spring.
Actuator provides runtime insights into the inner workings of an application, including metrics, thread dump information, application health
and environment variables.