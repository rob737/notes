--- Linux Distributions or distros :

Since, linux is open source so many communities and individuals have built distributions on top of original linux which is called as distros.

e.g. ubuntu, fedora, unix, debian, alpine etc.

Note : we will use ubuntu distribution.

-- TO download ubuntu image :

https://hub.docker.com/_/ubuntu

Commands : Note : ubuntu is the image name

1. To pull and run image :
   
   docker run image_tag
   e.g. docker run ubuntu
   
   Doubt : What is meant by running an image ? is it like we are starting a process executing the steps mentioned in the image?
   
2. To start the container in interactive mode :

	docker run -it ubuntu
	
Note : It starts a shell, shell is a program that takes our command (anything that we type on terminal) and passes it to OS for execution.	

Note : root@2cfdd3ca87db:/# represents shell prompt where root denotes root user, 2cfdd3ca87db denotes machine name, / denotes top level path 
	   and # denotes that we have logged in as root user otherwise it would have been $.

Note : Linux is a case sensitive OS.

3. history : this command gives us the list of commands that we have executed so far.
   
   !<command_number_from_list> will execute the corresponding command.
   
   Example :
   
   root@2cfdd3ca87db:/# history
    1  ls -lrt
    2  whoami
    3  echo $0
    4  history
root@2cfdd3ca87db:/# !3
echo $0
/bin/bash

4. Package manager like npm.
   In ubuntu, we have apt. (Advanced packaged tool)
   
   apt is basically like a repository which has packages present.
   
   apt list will show all the packages available and also the ones that are installed.
   
   apt install <package_name> will install the package but will install only the ones that are present in that package repository.
   
   apt update : It will update the package repository with newer packages which is downloaded from different predefined repos.
   
   apt remove <package_name> : It will unistall corresponding package.
   
Note : In linux, everything is a file including devices, network sockets, directories and so on.

There are couple of fixed directories at top level which are as following : ls /

1. bin : Binaries for programs
2. boot : All the files related to system booting.
3. dev : It represents devices so files that are needed to access devices are stored in this directory.
4. etc : Editable Text Configuration - this is where we have configuration files.
5. home : home directories for different users are stored.
6. root : home directory of root user.
7. lib : keeping library files like software library dependencies etc.
8. var : for keeping files that are updated frequently like block files,application data and so on.
9. proc : files that represent running processes since everything in linux is a file.
10. opt : directory to store manually installed softwares.	
11. usr : directory that stores system needed softwares.

--- Navigating file system :

Note : Whatever commands we execute in terminal are the programs or binaries in the bin directory.
e.g. echo or pwd, search for it in /bin directory.

mv : can be used to move or rename if we are moving in the same directory.

touch : to create new empty file.

more : command to list content of file in pages, pressing enter will load more contents and so on.

head : head -n 5 file.txt will display first 5 lines of supplied file.

tail : tail -n 5 file.txt will display last 5 lines of supplied file.

--- Redirection :

By default, standard input is keyboard and standard output is screen.


">" : cat file1 > file2, it reads content of file1 and write it to file2 instead of standard output file2.

Above will overwrite existing file.

However, if we use ">>" instead of ">" then it will append it to the file.

we can use redirection operator with any command.

--- Searching for text in files :

grep <case_sensitive_term> <file_path/file_name>

Note: everything in linux is case sensitive.

grep -i : it will make the search case insensitive.


grep can be used to search in multiple files.

e.g. grep hello file1.txt file2.txt

Doubt : can we search in whole directory as well?
 Yes, we need to use extra parameter -r .
 Example : grep -i -r host /etc : It will search the word host in all files of etc directory.
 

--- Finding files and directories :

find : find <path_name> -name <search_string>
to make it case insensitive, use -iname instead of -name.

if path_name is not given then it would search in current directory.
if search_string is not given then it just lists all the files in the supplied directory.

if we want to see only directories then we pass -type d as params.
e.g. find <path_name> -type d

to search only for use -type f

find <search_string * > : to search for all files starting with word search_string.

e.g. find -type f -name "host*"

--- Chaining Commands :

";" : Semi colon is used to chain commands.

e.g. command1 ; command2 ; command3

if any command in above fails then also other commands would execute.

If we need to prevent that then we can use & operator instead of ;

e.g. command1 & command2 & command3


OR operator :

command1 || echo "command 1 failed"

echo command will only be executed if command1 fails.

Pipe operator :

command1 | command 2 : ouput of command 1 goes as input to command 2


Note ::: if we put \ and then enter then we will go to the next line and then we can continue writing rest of the commands here.


---- Environment Variables :

printenv : see all the environment variables in this machine.


Note : OS looks only in the directories specified by PATH variable.

echo $env_variable_name  : to see the value of environment variable.


export <variable_name>=<variable_value> : to set environment variable in the current session.

Note :::::


.bashrc : It is the user's personal startup file i.e. everytime a user logs in, linux loads the command from this file.

If we write export commands in this file then it will be available across sessions for that particular user.


docker start -i <container_id> : To star a container in interactive session.

source : command to execute anything in our current session.
e.g. source ~.bashrc will reload the bashrc file in the current session i.e. it will read the contents of the file and perform operations
as per the contents of bashrc file in the current session.



----------- Managing processes :

A process is an instance of a running program i.e. a running application is identified by process.

-- To see all the running processes :

ps : list all the running processes.

bash is the interactive shell that we are writing our commands into, it takes our typed word as commands and sends it to OS kernel for execution. 

Result of ps command :

1. pid : process id of the command.

2. TTY : Terminal Type.
   one of the values of TTY is pts/0 : It means pseudo terminal 0 , the terminal that we interact with is called pseudo terminal.
   
3. Time : Amount of CPU time that the process consumed.

4. command : the actual command that is represented as process.

Note : To start any process as daemon process, append & at the end.

Note : To kill any process, use kill <pid> command.


-------- Managing users :

useradd -m <user_name> : command to create a new user with user_name and a directory in home folder.

Note: we also have adduser command which gives us the facility to set password as well.

All users are stored in /etc/passwd file : name is misleading, it stores users and not passwords.

Entry is stored in the format (e.g. useradd -m robin) :

robin:x:1000:1000::/home/robin:/bin/sh

robin : user name
x : password location
1000 : first one is user id
1000 : second one separated by colon is group id
/home/robin : home directory path 
/bin/sh : shell command that was used to create user, since, everything in OS is file.

If we want to modify the shell for a user : usermod -s /bin/bash robin
Now, it will use bash shell instead of sh shell.

Similarly, we have userdel command to delete the user.


Note : passwords are stored in the file /etc/shadow

docker exec -it <container_id> bash : to login to a conatiner with a bash shell  

docker exec -it -u robin af454 bash : to login as user robin


----- Managing groups :

Similar to managing users, we have groupadd, groupmod and groupdel commands.

e.g. groupadd developers

why do we even need groups ??

all users in the same group can have same kind of permissions.
That's why when you added your docker user to a particular group then you didn't have to use sudo command.

All the groups are written in file /etc/group

developers:x:1002 : id of developers group is 1002


There are two types of groups : Primary and secondary.

primary group is only one that is created by default with the same name as user 

secondary group can be 0 or many for that user.

so, whenever we create a file, the group permissions that is set by default is the primary group.

Command to add supplementary group (developers) to user (robin) : usermod -G developers robin

you can execute usermod command to see the list of available parameters.

groups robin : to see which all groups is user robin associated with.


---- File Permissions :

- --- --- --- : every file permission has 10 placeholders represented by dash.

first - if left blank represents a file and if it's directory then instead of -, it would be d.

next 3 dashes, represents permissions for the owner of the file.

next 3 dashes (after offset of 4 dashes) represents permissions for the primary group that the user belongs to.

last 3 dashes represents permissions for everyone else.

rwx : 421 are the file permissions and are represented by it's combinations.

Execute permission is basically to execute any command on the corresponding file/directory.
e.g. cd <dir_name> is basically that we are executing cd command on dir_name.

Example : 

-rw-r--r-- 1 root  root    11 Jul 16 09:11 deploy.sh

file deploy.sh is a file.

It's owner represented by owner name root has read and write permissions (rw-)
root belongs to group root (by default, primary group is created with same name as user) which has only read permission (r--).

everyone else also only read permission (r--).

we can change permission using chmod command.

e.g. chmod u+x deploy.sh -- set execute permission for file owner.
							Similarly, we can use u-x to remove permission and g+x to set permission for group and o+x to set permission for others.
							We can combine permissions also like chmod og+x+w-r deploy.sh (it is granting execute and write permission for others and group 
							and removing read permission)	
							
Note : To execute any file, we do :  ./<file_name.sh> where . represents the current directory.						