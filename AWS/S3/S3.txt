---- Building blocks :

files are called objects and are stored in directories called buckets.

bucket must have globally unique name (across all regions and all accounts).

Important : Even though bucket name has to be unique globally, buckets are defined within a region.


Object :

Object files have a key.

key is full path of the object.
e.g. s3://my-bucket//folder1/sub_folder1/myfile.txt

key is comprised of prefix and object name.

prefix : folder1/sub_folder1/
object name : myfile.txt

At once, 5 GB can be uploaded.
If file is above 5 GB then it has to be uploaded as multi part.


After creating object, pre-signed url validates whether we have access to the resource or not.

That's why if we just copy public url and paste it in browser, we won't be able to open it.

but if click on open from your account then we are able to open it because url contains access key attributes (e.g. X-AMZ-Security-Token).

----- S3 Security Policies :

1. IAM Role based :

2. Resource based :
--- Bucket level access
--- Object ACL (Access Control List)
--- Bucket ACL (Access Control List)

3. Encryption :

Encrypt object using encryption keys.

4. S3 bucket policy :
json structure like IAM policy.

Note : Explicit DENY in an IAM Policy will take precedence over an S3 bucket policy.


----- Static Website :

S3 can load static website as well.

----- S3 Versioning :

It can be done at bucket level.

----- S3 Replication :

Prerequisite : S3 versioning is enabled in both source and destination.

-- CRR (Cross Region Replication)

Asynchronous replication

-- SRR (Same Region Replication)

Asynchronous replication

Replication is not transitive i.e. bucket 1 -> bucket 2 and bucket2 -> bucket3 doesn't imply replication between bucket1 and bucket3.


----- S3 Storage classes :

S3 Durability : 11 9's i.e. 99.999999999% durable.

S3 Availabilty For S3 Standard : 99.99% (4 9's) i.e. not available 53 minutes a year.

Classes are of following types : 

1. S3 Standard :
   -- General : for frequent access
   -- Infrequent : for infrequent access and cheaper than general. 
   both are 99.99% Availabilty.
   
2. S3 Glacier storage classes :
    Lost cost object storage meant for recovery/archiving or backup.
   -- Instant Retrieval : access within milliseconds, good for order history.
   -- Glacier flexible retrieval :
         - Expedited : access within 1 to 5 mins
		 - Standard : 3 to 5 hours
		 - bulk : 5 to 12 hours	
   -- Glacier Deep Archive
         - Standard : 12 hours
		 - Bulk : 48 hours	
		 
		 
Intelligent Tiering service :
This service automatically migrate object from one tier to another depending on access pattern.
This can be achieved by setting up lifecycle configuration/rules for buckets.		 

Note : Lifecycle rules can also be created for object tags. (This is why tags are useful).


---- S3 event notifications :

Events like S3:ObjectCreated, S3:ObjectRemoved etc.

Downstream of S3 in case of events can be SQS, SNS, Lambda function etc.

Navigate to bucket properties , there we have option for Event Notifications etc.

Note: Ensure that SQS has accept permissions enabled.

------ S3 performance

Amazon S3 automatically scales to high request rates, latency 100-200 ms.

It supports 3500 writes and 5500 reads per second per prefix.

prefix is anything between bucket and file name.

e.g. bucket/folder1/subfolder1/images/file : Prefix is folder1/subfolder1/images


To increase upload :

1. Multi Part upload
2. From Client to Edge location via public network and then from Edge server to destination bucket over private network.  


To increase download :

1. use Byte range fetch query - basically download in parts.


------- S3 Select 

To filter out resource and then fetch it rather than fetching everything.

------- S3 encryption :

There are two types :

1. Server Side encryption

-- Encryption by key managed by AWS.
   To request amazon to encrypt S3 object : pass "x-amz-server-side-encryption":"AES256" in header.
   This is enabled by default for new buckets and new objects.

-- Encryption using AWS KMS (Key Management Service)
   Keys can be user defined as well here.	
   must set header "x-amz-server-side-encryption":"aws:kms".   

2. Client Side encryption

-- Client takes care of encrypting and decrypting object.


-------- S3 CORS :

Cross Origin Resource Sharing.

very important : 
Origin = protocol + hostname(domain) + port 
e.g. https://www.example.com/api1 is of same origin as https://www.example.com/nested/api2
as protocal + domain + port are same.


Flow is like below :

1. Components are client server / web browser, web server (origin) and one more server (cross origin).
2. client request web server to load a page and also some images along with index.html page to be downloaded.

3. client now makes options http call to other server to see if it has access to load images corresponding to origin server.

e.g. OPTIONS /
     Host: www.other.com 
	 origin : https:www.example.com
	 
	 we get a response from other domain server with below two headers:
	 Access-Control-Allow-Origin : list of domains that we have access to (e.g. https://www.example.com)
	 Access-Control-Allow-Methods : GET,PUT,DELETE
	 
	 if Access-Control-Allow-Origin has our origin in value then we can load images from cross origin server otherwise we can't.
	 
	we have CORS setting option in Permissions tab of S3. 


---- Pre-signed url :

This can be generated using aws cli, sdk or S3 console (under Object Actions option).

It has expiration time which can be configured while creating it.

Core concept is that the user which has pre-signed url attains the access policies of the users 
that has created the url for GET/PUT operation on S3.

one of the use case :

Allow a user temporarily to upload a file to private S3 bucket.