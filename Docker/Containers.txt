---- Starting containers :

container is a special type of process with it's own filesystem that is provided by the image.

docker run <image_name> : create and run a new container

docker start <container_id or image_name> : runs an existing container. It will not contain new changes in image if image is rebuilt.

TO run the container in detached mode i.e. in the background :

docker run -d <image_name>

Detached mode means, now container would run in background and not log anything on the console.

By default, docker gives container a random name, we can however give it a custom name while starting it.

e.g. docker run -d --name c1 react-app

Doubt : How to know the port at which container process is running as we are able to start multiple containers with the same image?

--- Viewing the logs :

docker logs <container_id>

docker logs -f <container_id> : This would keep generating new logs


--- Publishing ports :

Use case : map react-app running inside container to outside world otherwise we won't be able to access react-app.

Doubt : How do i interact with detached container like we used docker start -i


docker run -d -p <host_port>:<container_port> <image_id or image_name>

Above command is mapping host port (visible to outside world) to container port which is called port forwarding (verify this).  

If you do docker ps, you would see PORT column with entry ::

0.0.0.0:3001->3000/tcp, :::3001->3000/tcp  it means host port 3001 is mapped to container port 3000. (or 3001 is forwarded to 3000)

i.e. if you do localhost:3001 then this request is redirected to container port 3000.

---- Executing commands in running containers :

docker exec <container_id or container_name> <command to execute>
e.g. docker exec b00 ls

command to connect to container in interactive mode with shell command :

docker exec -it <container_id or container_name> sh

---- Stopping and starting containers :

docker stop/start <container_id or container_name>

---- Removing containers :

docker rm <container_id or container_name> : To remove stopped container

docker rm -f <container_id or container_name> : To remove container forcefully.

---- Container file system :

Each container has it's own file system that is invisible to other containers.

Note : We should never store our data in container's filesystem as if removed, all data would be lost.
Instead, use volumes.

---- Persisting data using volumes :

A volume is a storage outside of containers.
It can be directory on the host or somewhere on the cloud.

Command to create volume :

docker volume create <volume_name>

Command to inspect data :

docker volume inspect <created_volume_data>

Doubt : what is meant by mounting a file ?


Command to attach volume to our container :

docker run -d -p 4000:3000 -v <volume_name>:<absolute_path_in_container> <image_name>

e.g. docker run -d -p 4000:3000 -v app-data:/app/data react-app

Note: We need not have pre-created volume_name and absolute_path_in_container, docker engine will create it on the fly if not already present.

Note : We can also share the volume among multiple containers.


---- Copy files between host and container :

docker cp <source:absolute_path_of_file_to_copy>:<target:absolute_path_to_copy>

e.g. docker cp b1d1:/app/log.txt .
above is copying file log.txt in /app directory from container b1d1 to host current directory.

---- Sharing source code with container :

For development :
It is needed to prevent re-building images everytime.

For Production :
We must always re-build images even if there is a minor change.

Note: The way to achieve it is we create a binding between a directory on the host to directory on the container.

docker run -d -p 5001:3000 -v $(pwd):/app 

$(pwd) is the path on host
/app is the root path on container.

above command will create a binding between a directory on host to container such that changes are reflected immediately.

Doubt : What is hot reloading and how it works? -- It is used in react.