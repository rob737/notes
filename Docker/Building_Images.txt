----

What is an image technically ?

An image includes everything that an application needs to run.
It consists of following and many more :
1. A cut-down OS.
2. Third-party libraries
3. Application files/code
4. Environment variables and so on.....

What is a container technically ?

A container is basically a "special" type of process that provides isolated runtime environment to execute image.
It is a special type of process because it has it's own file system that is provided by the image.

We can spin up multiple containers from the same image but it is an isolated environment so files created in one container
will be exclusive to that container.

--- Docker file :

It contains instructions for building an image (check Sample_Dockerfile.txt)

Main commands in Dockerfile :

1. FROM : to import from base image.
2. WORKDIR : to setup current working directory (similar to cd in linux).
3. COPY/ADD : To copy files from your source code to docker image.
4. RUN : To execute any OS commands once the image has an associated container and these commands run in isolation within container's filesystem.
5. ENV : to set environment variables.
6. EXPOSE : To tell docker that our container would be starting on a particular port.
7. USER : For specifying the owner or the user that should run the application.
8. CMD/ENTRYPOINT : To specify the commands that should be executed when container is started.
					Difference between CMD/ENTRYPOINT and RUN is that CMD commands are executed only once when container is starting.
					
--- Choosing the right base image :

docker build -t <tag_name> <path_of_Dockerfile>

Note : The path that we give in docker build command sets up a docker context which is sent to docker engine, docker engine 
       executes the docker file commands on that docker context and hence it has access only to those files that 
	   are present in path that is given in docker build command.
	   
	   docker context contains everything that needs to be sent to docker engine i.e. code etc.

docker run -it <image_name> <shell_name> : This command is to run newly created docker image.

--- Running commands within docker container :

Doubt : Difference between docker start and docker run ?

--- Setting Environment variables :

ENV <name>=<value>

--- Exposing ports : 

We would need a way to map port on host OS to port on container filesystem.

--- Setting up the user :

By default, docker runs with root user.
we would need to setup specific users to mitigate security risks.

# -S denotes system user and -G denotes primary group.
RUN addgroup robin && adduser -S -G robin robin
# sets the current user to mentioned user and all the following commands
# will be executed with this user.
USER robin


--- Defining entry points :

Note : we can give commands while starting docker command :
  example :  docker run react-app npm start

# whenever container is started, below command would be executed.
# There can be only one command instruction, if there are multiple defined 
# then only the latest one would execute.
# This is called shell form as it spins up a new shell and execute the command, 
# we shouldn't use it.
# CMD npm start

# we should use this EXEC form
CMD ["npm","start"]


Note : RUN is build time instruction i.e. commands mentioned with RUN are executed during build time.
	   CMD is runtime instruction i.e. it gets executed when container is started.	
	   
Similarly, we have entrypoint command with same syntax as CMD.

--- Speeding up builds :

An image is a collection of layers.

A layer is basically a small filesystem that only includes modified files.