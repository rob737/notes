----- 
Constructor :

Constructor is automatically called when an object is created.
Name of the constructor is same as that of the class.

e.g. new Class() then storage is allocated and constructor with same name Class() is called.

Constructor has no return value.

java compiler by default creates a default constructor if not already defined by user.


---- Method Overloading :

same method name but different type of arguments or different ordering of arguments.

arguments will be automatically upcasted but downcasting has to be done manually.


----- this keyword :

this refers to method's calling object in Java (no complications like JavaScript).

e.g. class ThisExplain {

     explainingThis(secretReference, args){
	    this = secretReference; // This secretReference is basically reference of ThisExplain object.
		// However, we need not mention secretReference as argument explicitly, this is done internally by compiler.	
	 }
	 psvm(String[] args){
	   ThisExplain t = new ThisExplain();
	   t.explainingThis(args);
	 } 	
}


this keyword can "obviously" be used only in non-static methods as static methods are linked to class and not any particular object.

this(args) -> It can be used to call other constructor based on args that is passed as arguments.


------- static :

We cannot call non static methods from static methods.
Possible reason : As static methods are bound to class there is no way to figure out concerned object for non static method that is intended to be called.


------- Garbage collection :

1. By default, garbage collector only re-instates memory for objects created using new operator.
   It doesn't cleanup memory for object's special memory (need to figure this out).
   Solution for this is to define a finalize() method in your class.
   Garbage collector first calls this finalize() method and then in next cycle start with garbage collection process.
   
2. Garbage collection is not destruction.

3. Garbage collection is only about memory.

finalize() only cleans up memory that is created by using native methods (i.e. C/C++ methods).
Hence, it is hardly used and dangerous.


Note : Garbage colllection is not guaranteed, if JVM is not close to filling up memory then garbage collection will not happen.

System.gc() - It iterates over all object and finds out if something can be cleaned up.
			  Also, for each object finalize() method is called.		  
			  
			  
Memory paging - It is a phenomenon where processor reads/writes data to and from main memory to disk to increase capacity.

Memory paging is costly as there are couple of CPU cycles that would be overhead for to and fro disk operations.

Garbage collectoe rearranges things and makes space for infinte object storage.			  


--------- Garbage Collection Techniques :

1. Reference counting - analogous to topological sorting (This however is never used in any JVM implementation).
   Memory is released instantly as soon as reference count to a particular object becomes zero.
   So, when an object is referenced, it's reference count is increased and when referencing object is deleted then 
   all referenced object's count is decreased accordingly.
   
2. Non dead object must be traceable back to an object (What is static storage ?)
   So, reference is put on stack (and static storage ?) and each reference is traversed to find out live object and 
   each live object is traversed to find all nested live objects.
   This gives a list of all live objects that should not be cleared.
   Above logic is used to figure out live objects in stop and copy garbage collector mechanism where in
   all live objects are copied from one heap to another living behind all dead objects in previous heap to clear out.

3. Mark and Sweep is similar to above (stop and copy) garbage collector, the main point of difference is that 
   after all live objects are marked then only sweep operation i.e. cleaning off dead objects is initiated.
   mark and sweep also stops program execution.

In adaptive mark and sweep, garbage collection mechanism is switched between mark and sweep and stop and copy.

-------- JIT (Just In Time) compiler

After compilation, bytecode (i.e. .class file) is created.
bootstrap program loads this class file into main memory and JIT compiler creates hardware specific Instruction sets just before 
when there is a need to create first object or start of the execution.

one of the possible optimization is lazy compilation i.e. loading only part of bytecode that is required for task at hand. 

--------- Memory Initialization
members of an object are initialized with a default value (e.g. null for uninitialized object reference).


Note : all variables inside a class are first initialized (either explicitly or implicitly) and then constructor is called.
	   Order of code is irrelevant i.e. initialization statements can be present after constructor but even then initialization 
	   will be called first and then constructor.

-------- static data initialization

static keyword can only be applied to object members and not local variables.