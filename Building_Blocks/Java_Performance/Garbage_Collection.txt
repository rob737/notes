------------------------------------------------------ Doubt -------------------------------------------------------------

1. When memory of metaspace is cleared i.e. when static objects are cleared ?


------------------------------------------------------ XXXXX -------------------------------------------------------------


---- Managed Language :

In java, we don't have to explicitly free up memory when object execution is completed, JVM takes care of it.

In languages like C etc, programmer has to explicitly specify that object memory need to be cleared using free() method call.


Memory leak is basically, even though execution of code which requires particular object is completed and object is safe to be removed from memory.

But due to some unintentional reference, Garbage collector is not able to clear up that object's memory thus bloating up memory and

increase in execution time as it would lead to more swap in-out of pages.


Note: JVM is written in C and it takes care of memory management in Java for programmers.

By Managed, it generally means following :

1.  Memory leaks at OS level is impossible in Java as those are managed by JVM and not by programmers directly.

Example : when we use "new" operator to create an object, it requests memory to JVM which in turn does OS system call to create/manage/free memory.

2. It provides Garbage Collection which is technically a separate process that is running that is taking care of freeing up memory in heap.



---- How Java knows which objects can be freed up from heap ?

Thumb rule is this (Important) :

Any object on the heap that is not reachable from reference on stack or metaspace "recursively" is eligible for Garbage Collection.


---- System.gc() method :


System.gc() method is basically a hint/request to JVM to do the garbage collection process.

It doesn't guarantee that garbage collection will be triggered instantly or it will even trigger garbage collection.


public static void main(String[] args) throws InterruptedException {
        Runtime runtime = Runtime.getRuntime();

        // This is to get the free memory in bytes.
        long availableBytes = runtime.freeMemory();
        System.out.println("Available memory at start: " + availableBytes/1024 + "K");

        List<Customer> customerList = new ArrayList<>();

        for(int i=0; i<1000000; i++){
            customerList.add(new Customer("Robin"));
        }

        availableBytes = runtime.freeMemory();

        System.out.println("Available memory when customers created : " + availableBytes/1024 + "K");

        // making customerList reference on stack point to a new object in heap.
        // Now, all previously created customer objects will not be in any way reachable from stack.
        customerList = new ArrayList<>();

        availableBytes = runtime.freeMemory();
        System.out.println("Available memory when customers no longer referenced: " + availableBytes/1024 + "K");

        Thread.sleep(1000);

        availableBytes = runtime.freeMemory();

        System.out.println("Available memory 1 seconds later: " + availableBytes/1024 + "K");

        // Request to JVM to trigger garbage collection process.
        System.gc();

        availableBytes = runtime.freeMemory();
        System.out.println("Available memory after GC command: " + availableBytes/1024 + "K");
}


Output of above program with Java 11 :

Available memory at start: 246096K
Available memory when customers created : 212802K
Available memory when customers no longer referenced: 212802K
Available memory 1 seconds later: 212802K
Available memory after GC command: 19177K (How come available memory is reduced ??)

Available memory gets reduced because java 11 makes use of demand paging.

basically, JVM gives back excess memory that is not needed for it to execute the process back to O.S. such that those excessive memory can be 
allocated to other process by OS.

Also, note that when we set max heap size then instantly JVM doesn't request O.S. to dedicate asked memory to the process.
Instead, demand paging comes into play.
This may lead to performance issues as demand paging involves I/O from disk and hence that overhead.

However, initialHeapSize is respected in Java 11 as well.

Note: Available memory will never go down for java 8 or below.



----- Why shouldn't we explicitly do System.gc() ?

Garbage collection uses system resources or even temporarily hold running of the main application so it's better to let JVM decide
the optimal time to run garbage collection process.


----- finalize() method :

When GC process has started removing the concerned object from the memory and not when the object is eligible for GC then JVM executes the 
finalize() method of that object.

It is deprecated since Java 9 onwards because programmers never had control on it's execution which is totally dependent on GC.
So, it may lead to resource leaks if resource termination logic is placed in this method.


Note: Once process completes execution then all it's memory is removed from main memory (RAM).
