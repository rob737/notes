------ Container or collections 
This is basically Java Datastructure.
java container classes will automatically resize themselves.

Annotations start with '@' sign followed by argument.

With generics, we can prevent putting wrong type of object inside container.

late binding also works with Generics.

When we print object, we get something on the lines (GrannySmith@7d772e) which is basically 
className followed by @ and followed by hash code of the object in hexadecimal (generated by hashcode() method).

Containers are divided into two parts :

1. Collections : non asssociative data structure.
2. Maps : associative data structure.


Note : List and Map are interfaces.
	   Collection is also an interface.
	   
Arrays.asList(arg) returns a list of type of args.
args can be comma separated individual values or an array of values.


Collections.addAll(args) -> args can also be a collectio object apart from above.

We can give hint to Collections to define type of reference that needs to be stored.
e.g. instead of Arrays.asList(), use Arrays.<reference type>asList().

---- Set and Map :

Set is an interface which contains following implementation classes:
1. HashSet : elements are not stored in a particular order
2. TreeSet : elements are stored in ascending order
3. LinkedHashSet : elements are stored in the order in which they are inserted.

Similaryly for Map interface, we have HashMap, TreeMap and LinkedHashMap following the same order of elements as above with respect to map.

---- List :

List interface has two implmentation classes -> ArrayList and LinkedList.

for object equality, they use equals method present in Object class which checks for the contents of the object.

Note : figure out how to use java profiler for optimization.

---- Iterator (This is called iterator design pattern as well) :

Iterator can be used to write collection agnostic iteration logic.
Iterator can move in only one direction.

Flow : 

1. Iterator it = Collection.iterator() --> to get the index of the first element of collection. (we can remove collection with any data structure).
2. it.hasNext() --> to check if it has another element to iterate.
3. it.next() --> to move to next element.

There is a subtype applicabe only on List which is called ListIterator which can move bi-directional.

---- Linked List :
