------ Composition :

Create object of existing class in new class and use it's functionality.
This means that new class is composed of existing class.

e.g. order and purchase

------ Inheritance :

Create an entirely new type based on the type of existing class and override functionality using polymorphism.

e.g. User and doctor.


toString() : this method is called when a compiler wants a String but it has an object.

By default, every class is sub class of Object class.

class A extends B { // At this point, we get all the "accessible" members of base class B in A.

} 


we can inherit classes from different package but only public members would be accessible.

Important : Inheritance doesn't copy the members of the base class, when derived object is initialized, it creates within it
a sub object which points to the instance of the base class.


Java automatically synthesises constructor to call constructor of base class.
since derived object needs to have all accessible members of base class so first base class is initialized and then derived class using constructor.

class A extend B => class B extends C => new C () => order of initialization A,B,C which makes sense because C needs to have reference of B and in turn
B needs to have reference of C.

So, in C there would be nested object which contains reference of B and A wrapped within instance of A.

In case of parametrized constructor, we need to explictly call base class constructors.


------ Delegation :

It is a mix of composition and inheritance.

composition in a way that we define object in our class and calls it whenever needed.
inheritance in a way that all members of delegated class are accessible from delegating class.


------- finally block :

finally block is always executed.


------- Name hiding :

If method is overloaded in base class and then it's also overloaded in derived class then also base class overloaded methods are available to use.
It doesn't hide overloaded methods like it's done in C++. 

@Override restricts a particular method to only be overriden and not overloaded.



------- When to use composition vs when to use inheritance :

composition is used in "has a" relationship scenario. e.g. customer has orders.
inheritance is used in "is a" relationship scenario. e.g. whatsapp is a message.


------- protected :

Accessible for same package classes and accessible for derived classes from different package.


------- Upcasting :

derived class is of the same type as base class.

so, below assignment will hold good as java type checks:

Base class reference = derived class reference;

Tip : If we need to upcast then use inheritance otherwise design classes keeping composition in mind.

------- final keyword:

final keyword can be used in 3 places :

data, methods and classes.

final with primitives implies that value cannot be changed.
final with object implies that reference cannot be changed however the value that is object can obviously be changed.

if a variable is both static and final then it is declared in format VARIABLE_NAME_CAPITAL_WITH_UNDERSCORE_FOR_MULTI_WORDS.

final values's doesn't imply that it is known at compile time.


------ Blank final :

We can initialize final variable in constructor and there is no mandate to initialize it at declaration time.

------ final arguments in method :

Can't change the reference to point to another object, used for passing args in inner class.

------ final methods :

final method cannot be overriden.

------ final classes :

final class cannot be inherited.
